const wrapper = document.getElementById("signature-pad");
const clearButton = wrapper.querySelector("[data-action=signature-pad-clear]");
const changeColorButton = wrapper.querySelector("[data-action=signature-pad-change-color]");
const changeWidthButton = wrapper.querySelector("[data-action=signature-pad-change-width]");
const undoButton = wrapper.querySelector("[data-action=signature-pad-undo]");
const saveJPGButton = wrapper.querySelector("[data-action=signature-pad-save-jpg]");
const canvas = wrapper.querySelector("canvas");
const signaturePad = new SignaturePad(canvas, {
  backgroundColor: 'rgb(255, 255, 255)'
});
function signatureresizeCanvas() {
}
window.onresize = signatureresizeCanvas;
signatureresizeCanvas();

function downloadSignature(dataURL, filename) {
  const blob = signaturedataURLToBlob(dataURL);
  var wavefilefromblob = new File([blob], 'filename.wav');
  sendWavFiletoServer(wavefilefromblob);
  signaturePad.clear();
}

function signaturedataURLToBlob(dataURL) {
  const parts = dataURL.split(';base64,');
  const contentType = parts[0].split(":")[1];
  const raw = window.atob(parts[1]);
  const rawLength = raw.length;
  const uInt8Array = new Uint8Array(rawLength);
  for (let i = 0; i < rawLength; ++i) {
    uInt8Array[i] = raw.charCodeAt(i);
  }
  return new Blob([uInt8Array], { type: contentType });
}

clearButton.addEventListener("click", () => {
  signaturePad.clear();
});

undoButton.addEventListener("click", () => {
  const data = signaturePad.toData();
  if (data) {
    data.pop(); 
    signaturePad.fromData(data);
  }
});

changeColorButton.addEventListener("click", () => {
  const r = Math.round(Math.random() * 255);
  const g = Math.round(Math.random() * 255);
  const b = Math.round(Math.random() * 255);
  const color = "rgb(" + r + "," + g + "," + b +")";
  signaturePad.penColor = color;
});

changeWidthButton.addEventListener("click", () => {
  const min = Math.round(Math.random() * 100) / 10;
  const max = Math.round(Math.random() * 100) / 10;
  signaturePad.minWidth = Math.min(min, max);
  signaturePad.maxWidth = Math.max(min, max);
});

saveJPGButton.addEventListener("click", () => {
  if (signaturePad.isEmpty()) {
    alert("Please provide a signature first.");
  } else {
    const dataURL = signaturePad.toDataURL("image/jpeg");
    downloadSignature(dataURL, "signature.jpg");
  }
});
